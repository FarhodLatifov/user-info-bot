import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from fastapi import FastAPI
from dotenv import load_dotenv
from contextlib import asynccontextmanager

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", 8000))

if not BOT_TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# --- Lifespan –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è FastAPI ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    asyncio.create_task(start_bot())
    yield
    await bot.session.close()

app = FastAPI(lifespan=lifespan)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile")]
        ]
    )
    return keyboard

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ.",
        reply_markup=get_main_keyboard()
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å" ---
@dp.callback_query(F.data == "show_profile")
async def show_profile(callback: types.CallbackQuery):
    user = callback.from_user
    profile_info = (
        f"üÜî <b>ID:</b> {user.id}\n"
        f"üë§ <b>–ò–º—è:</b> {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üë• <b>–§–∞–º–∏–ª–∏—è:</b> {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üåç <b>–Ø–∑—ã–∫:</b> {user.language_code or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"üíé <b>–ü—Ä–µ–º–∏—É–º:</b> {'‚úÖ –î–∞' if user.is_premium else '‚ùå –ù–µ—Ç'}\n"
        f"üìå <b>–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞:</b> {'üëë Premium' if user.is_premium else 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"
    )
    await callback.message.edit_text(profile_info, reply_markup=get_main_keyboard())
    await callback.answer()

# --- FastAPI —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ ---
@app.get("/")
async def health_check():
    return {"status": "running"}

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def start_bot():
    try:
        await bot.set_my_commands([BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")])
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        await bot.session.close()
        os._exit(1)

# --- –ó–∞–ø—É—Å–∫ FastAPI ---
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=PORT, reload=True)
